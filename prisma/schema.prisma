// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para usuários do Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // ID do usuário no Clerk
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  clientes    Cliente[]
  emprestimos Emprestimo[]
  pagamentos  Pagamento[]
  caixa       Caixa[]
  movimentacoes MovimentacaoCaixa[]

  @@map("users")
}

// Modelo para clientes
model Cliente {
  id          String   @id @default(cuid())
  nome        String
  email       String   @unique
  telefone    String?
  cpf         String   @unique
  endereco    String?
  cidade      String?
  estado      String?
  cep         String?
  dataNascimento DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emprestimos Emprestimo[]

  @@map("clientes")
}

// Modelo para controle de caixa
model Caixa {
  id            String   @id @default(cuid())
  saldoInicial  Decimal  @db.Decimal(10, 2)
  saldoAtual    Decimal  @db.Decimal(10, 2)
  dataInicial   DateTime @default(now())
  observacoes   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("caixa")
}

// Modelo para movimentações de caixa
model MovimentacaoCaixa {
  id            String   @id @default(cuid())
  tipo          TipoMovimentacao
  valor         Decimal  @db.Decimal(10, 2)
  descricao     String
  dataMovimentacao DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emprestimoId  String?
  emprestimo    Emprestimo?  @relation(fields: [emprestimoId], references: [id], onDelete: SetNull)

  @@map("movimentacoes_caixa")
}

// Modelo para empréstimos
model Emprestimo {
  id              String   @id @default(cuid())
  valor           Decimal  @db.Decimal(10, 2)
  valorTotal      Decimal  @db.Decimal(10, 2) // Valor com juros
  taxaJuros       Float    // Taxa de juros fixa (ex: 20.0 = 20%)
  numeroParcelas  Int
  valorParcela    Decimal  @db.Decimal(10, 2)
  dataEmprestimo  DateTime @default(now())
  dataVencimento  DateTime
  status          StatusEmprestimo @default(ATIVO)
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  clienteId       String
  cliente         Cliente      @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pagamentos      Pagamento[]
  movimentacoes   MovimentacaoCaixa[]

  @@map("emprestimos")
}

// Modelo para pagamentos
model Pagamento {
  id              String   @id @default(cuid())
  numeroParcela   Int
  valorParcela    Decimal  @db.Decimal(10, 2)
  valorPago       Decimal  @db.Decimal(10, 2)
  dataVencimento  DateTime
  dataPagamento   DateTime?
  status          StatusPagamento @default(PENDENTE)
  formaPagamento  FormaPagamento?
  observacoes     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  emprestimoId    String
  emprestimo      Emprestimo    @relation(fields: [emprestimoId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pagamentos")
}

// Enums
enum StatusEmprestimo {
  ATIVO
  QUITADO
  EM_ATRASO
  CANCELADO
}

enum StatusPagamento {
  PENDENTE
  PAGO
  EM_ATRASO
  PARCIAL
}

enum FormaPagamento {
  DINHEIRO
  PIX
  CARTAO_CREDITO
  CARTAO_DEBITO
  TRANSFERENCIA
  BOLETO
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
}
